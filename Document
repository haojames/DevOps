Declarative  -> pipline{
			Agent any
			Stages{
				Stage('Build')
				}
					}
Scripted -> node {
				Stage{}}
				


Share Lib
		Directory Structure -> src, vars, resources
CPS 


Groop OOP base on Java flatform.

Support:
	+ static and dynamic type
	+ operator overloading
	+ Native syntax for list and associative arrays
	+ regular expression
	+ markup XML and HTML
	+ Java Lib
	+ extend java.lang.Object
1 Basic Syntax
	Import -> library
	Def  -> define function, dynamic type.
	
	Comment - > //
			/**/
	
	Keywords  khong dung keyword khi dat ten bien
	Data Types -> Cx just work with int, string, boolean
				-  Class Numeric
				- Variables
						- Relational Math
						- Assignment operators
	Strings -> Quotes ''
				'''
				Hello World
				'''
		String Interpolaton ${}
		Escaping Special Characters
		Repetation *
		String Length length() method



What is Grafana
Overview: Open source, draw graphs base on metrics, logs, traces.
Warning over Email, Team, AWS SNS.
Support multiple data sources: 
Dashboard:
		+ Main page include options.
Panel: 
		+ Get data from data source by matrics.
Data Source:
		+ Systems or datasources 

Main components in Grafana
	Alert: Warning Information, create Contact point
	Users and Permissions: Manage user and role policy
	Plugins:
	Templating: User variables filter on the dashboard.


Overview: Database real-time get data follow run-time by GO

‚Ä¢ Thu th·∫≠p s·ªë li·ªáu (metrics) theo th·ªùi gian (time-series) t·ª´ c√°c d·ªãch v·ª•/h·ªá th·ªëng m√† n√≥ gi√°m s√°t.
‚Ä¢ L∆∞u tr·ªØ d·ªØ li·ªáu metrics v√†o c∆° s·ªü d·ªØ li·ªáu ri√™ng c·ªßa n√≥, t·ªëi ∆∞u cho d·ªØ li·ªáu d·∫°ng time-series.
‚Ä¢ Cho ph√©p truy v·∫•n d·ªØ li·ªáu v·ªõi ng√¥n ng·ªØ PromQL (Prometheus Query Language).
‚Ä¢ H·ªó tr·ª£ c·∫£nh b√°o (alerting) th√¥ng qua Alertmanager.
‚Ä¢ C√≥ giao di·ªán web c∆° b·∫£n ƒë·ªÉ xem d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì.

Prometheus ho·∫°t ƒë·ªông d·ª±a tr√™n c∆° ch·∫ø pull model, nghƒ©a l√† n√≥ ƒë·ªãnh k·ª≥ g·ªçi t·ªõi c√°c endpoint (th∆∞·ªùng l√† /metrics) c·ªßa c√°c service ƒë·ªÉ l·∫•y d·ªØ li·ªáu.
(Ngo·∫°i l·ªá l√† v·ªõi c√°c target kh√¥ng th·ªÉ expose endpoint, th√¨ c√≥ th·ªÉ d√πng push gateway.)

Th√†nh ph·∫ßn	M√¥ t·∫£
Prometheus Server	Thu th·∫≠p, l∆∞u tr·ªØ v√† x·ª≠ l√Ω d·ªØ li·ªáu
Exporter	C√°c ch∆∞∆°ng tr√¨nh ho·∫∑c plugin cung c·∫•p metrics cho Prometheus (v√≠ d·ª•: Node Exporter, MySQL Exporter)
Pushgateway	Nh·∫≠n d·ªØ li·ªáu t·ª´ c√°c job ng·∫Øn h·∫°n (short-lived) v√† ƒë·∫©y v·ªÅ Prometheus
Alertmanager	Qu·∫£n l√Ω c·∫£nh b√°o v√† g·ª≠i th√¥ng b√°o (qua email, Slack, v.v.)
PromQL	Ng√¥n ng·ªØ truy v·∫•n d·ªØ li·ªáu trong Prometheus



Splunk d√πng l√†m g√¨?
	1. Gi√°m s√°t h·ªá th·ªëng (IT Monitoring)
		‚óã Theo d√µi hi·ªáu su·∫•t m√°y ch·ªß, ·ª©ng d·ª•ng, thi·∫øt b·ªã m·∫°ng...
		‚óã C·∫£nh b√°o khi c√≥ s·ª± c·ªë x·∫£y ra.
	2. Qu·∫£n l√Ω log (Log Management)
		‚óã Thu th·∫≠p, l∆∞u tr·ªØ v√† ph√¢n t√≠ch log t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau (Linux, Windows, t∆∞·ªùng l·ª≠a, ·ª©ng d·ª•ng‚Ä¶).
	3. B·∫£o m·∫≠t (Security)
		‚óã S·ª≠ d·ª•ng ƒë·ªÉ ph√°t hi·ªán h√†nh vi b·∫•t th∆∞·ªùng, x√¢m nh·∫≠p, log c·∫£nh b√°o.
		‚óã L√† n·ªÅn t·∫£ng cho c√°c gi·∫£i ph√°p SIEM nh∆∞ Splunk Enterprise Security.
	4. DevOps / Observability
		‚óã H·ªó tr·ª£ ph√¢n t√≠ch s·ª± c·ªë (troubleshooting) v√† t·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng (APM).
		‚óã Gi√∫p theo d√µi to√†n b·ªô lifecycle c·ªßa ·ª©ng d·ª•ng (logs, metrics, traces).
Th√†nh ph·∫ßn	Ch·ª©c nƒÉng ch√≠nh
Splunk Forwarder	G·ª≠i log t·ª´ m√°y ngu·ªìn ƒë·∫øn Splunk indexer
Splunk Indexer	L∆∞u tr·ªØ, l·∫≠p ch·ªâ m·ª•c v√† ph√¢n t√≠ch d·ªØ li·ªáu
Splunk Search Head	Giao di·ªán ng∆∞·ªùi d√πng ƒë·ªÉ t√¨m ki·∫øm, t·∫°o dashboard v√† c·∫£nh b√°o


ƒêi·ªÉm m·∫°nh c·ªßa Splunk
	‚Ä¢ H·ªó tr·ª£ real-time monitoring
	‚Ä¢ C√≥ dashboard tr·ª±c quan
	‚Ä¢ H·ªó tr·ª£ nhi·ªÅu ƒë·ªãnh d·∫°ng log & d·ªØ li·ªáu kh√¥ng c·∫•u tr√∫c
	‚Ä¢ M·∫°nh m·∫Ω trong query v·ªõi ng√¥n ng·ªØ SPL (Search Processing Language)



Create graphs then create dashboard for which info you want.
System Structure in BEG

C·∫•u h√¨nh XML ‚ûù Exporter Framework ‚ûù T√≠ch h·ª£p ALM tools ‚ûù Ph√¢n ph·ªëi t·∫£i ‚ûù Xu·∫•t d·ªØ li·ªáu ra CSV, DB ho·∫∑c PDF


üîß1. Configuration Input
	‚Ä¢ G√≥c d∆∞·ªõi b√™n tr√°i l√† t·ªáp c·∫•u h√¨nh d·∫°ng XML (file configInput.xml), trong ƒë√≥:
		‚óã X√°c ƒë·ªãnh c√°c lo·∫°i c√¥ng c·ª• (tool-type)
		‚óã C√°c module c·∫ßn t√≠ch h·ª£p, c√°c thu·ªôc t√≠nh v√† ƒë·ªãnh d·∫°ng li√™n k·∫øt d·ªØ li·ªáu.
	‚Ä¢ T·ªáp n√†y l√†m ƒë·∫ßu v√†o c·∫•u h√¨nh cho h·ªá th·ªëng.

üîÑ 2. Exporter Framework
	‚Ä¢ ƒê√¢y l√† l√µi x·ª≠ l√Ω ch√≠nh c·ªßa h·ªá th·ªëng.
	‚Ä¢ Nh·∫≠n d·ªØ li·ªáu t·ª´ c√°c c√¥ng c·ª• qu·∫£n l√Ω v√≤ng ƒë·ªùi ·ª©ng d·ª•ng (ALM tools) v√† x·ª≠ l√Ω xu·∫•t d·ªØ li·ªáu theo c√°c ƒë·ªãnh d·∫°ng kh√°c nhau.
	‚Ä¢ D·ªØ li·ªáu ƒë·∫ßu v√†o ƒëi qua th√†nh ph·∫ßn Load Balancing ƒë·ªÉ ph√¢n ph·ªëi kh·ªëi l∆∞·ª£ng x·ª≠ l√Ω ƒë·ªÅu.

üîå 3. C√°c c√¥ng c·ª• ALM ƒë∆∞·ª£c t√≠ch h·ª£p (IBM Jazz Suite)
C√°c c√¥ng c·ª• ch√≠nh trong h·ªá th·ªëng (g√≥c tr√™n):
T√™n c√¥ng c·ª•	Vi·∫øt t·∫Øt	Ch·ª©c nƒÉng
DNG	DOORS Next Generation	Qu·∫£n l√Ω y√™u c·∫ßu (Requirements Management)
RQM	Rational Quality Manager	Qu·∫£n l√Ω ki·ªÉm th·ª≠ ph·∫ßn m·ªÅm (Test Management)
RTC	Rational Team Concert	Qu·∫£n l√Ω m√£ ngu·ªìn, t√°c v·ª•, ti·∫øn tr√¨nh d·ª± √°n
RMM	Rational Method Composer (ho·∫∑c m·ªôt c√¥ng c·ª• m·ªü r·ªông kh√°c)	
DC	Design Component (ho·∫∑c Data Collector t√πy ng·ªØ c·∫£nh)	
üîÅ C√°c c√¥ng c·ª• n√†y giao ti·∫øp th√¥ng qua OSLC & REST API ƒë·∫øn Exporter Framework.

‚òÅÔ∏è 4. N·ªÅn t·∫£ng Jazz Platform
	‚Ä¢ D∆∞·ªõi c√πng l√† n·ªÅn t·∫£ng IBM Jazz Integration Architecture ‚Äì n∆°i t·∫•t c·∫£ c√°c c√¥ng c·ª• IBM Rational t√≠ch h·ª£p v√† ho·∫°t ƒë·ªông chung.
	‚Ä¢ C√°c t√≠nh nƒÉng nh∆∞: Dashboards, Security, Notification, Audit Trail‚Ä¶

üì§ 5. Xu·∫•t d·ªØ li·ªáu (Export Outputs)
H·ªá th·ªëng h·ªó tr·ª£ xu·∫•t d·ªØ li·ªáu theo nhi·ªÅu ƒë·ªãnh d·∫°ng nh·ªù v√†o Extendable Tool Support:
	‚Ä¢ CSV Export ‚Üí Excel
	‚Ä¢ DB Export ‚Üí C∆° s·ªü d·ªØ li·ªáu (Database)
	‚Ä¢ PDF Export ‚Üí T√†i li·ªáu PDF b√°o c√°o

üí¨ 6. M·ªôt s·ªë nh√£n trong h√¨nh:
	‚Ä¢ QC ‚Üí C√≥ th·ªÉ l√† t√≠ch h·ª£p v·ªõi HP Quality Center (t√πy h·ªá th·ªëng).
	‚Ä¢ BitBucket ‚Üí Qu·∫£n l√Ω m√£ ngu·ªìn (SCM).
	‚Ä¢ Track and Release ‚Üí Qu·∫£n l√Ω quy tr√¨nh ph√°t h√†nh ph·∫ßn m·ªÅm.



üîç B·∫£ng So S√°nh Splunk vs Power BI
Ti√™u ch√≠	Splunk	Power BI
M·ª•c ƒë√≠ch ch√≠nh	Ph√¢n t√≠ch log, machine data, DevOps, b·∫£o m·∫≠t (SIEM)	Tr·ª±c quan h√≥a d·ªØ li·ªáu kinh doanh t·ª´ c∆° s·ªü d·ªØ li·ªáu, Excel, v.v.
Ngu·ªìn d·ªØ li·ªáu	Logs, syslogs, metrics, events t·ª´ h·ªá th·ªëng IT, ·ª©ng d·ª•ng, server	Excel, SQL Server, Azure, SharePoint, web APIs, Salesforce, v.v.
X·ª≠ l√Ω d·ªØ li·ªáu real-time	R·∫•t t·ªët, h·ªó tr·ª£ streaming & c·∫£nh b√°o theo th·ªùi gian th·ª±c	H·∫°n ch·∫ø, th∆∞·ªùng d√πng batch update ho·∫∑c refresh theo th·ªùi gian
Ng√¥n ng·ªØ truy v·∫•n	SPL (Search Processing Language)	DAX (Data Analysis Expressions), Power Query (M)
·ª®ng d·ª•ng ƒëi·ªÉn h√¨nh	Gi√°m s√°t h·ªá th·ªëng, b·∫£o m·∫≠t, ph√°t hi·ªán s·ª± c·ªë, ph√¢n t√≠ch log	KPI doanh nghi·ªáp, b√°o c√°o doanh s·ªë, qu·∫£n tr·ªã t√†i ch√≠nh, nh√¢n s·ª±...
B·∫£o m·∫≠t v√† SIEM	T√≠ch h·ª£p s·∫µn trong Splunk Enterprise Security (SIEM)	Kh√¥ng h·ªó tr·ª£ tr·ª±c ti·∫øp b·∫£o m·∫≠t/gi√°m s√°t h·ªá th·ªëng
Kh·∫£ nƒÉng t√πy bi·∫øn b√°o c√°o	R·∫•t t·ªët, nh·∫•t l√† cho log, truy v·∫•n drill-down theo event	Xu·∫•t s·∫Øc cho b√°o c√°o kinh doanh, KPI, nhi·ªÅu bi·ªÉu ƒë·ªì t√πy bi·∫øn ƒë·∫πp
ƒê·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng ch√≠nh	DevOps, Admin h·ªá th·ªëng, SOC (Security Operation Center)	Business Analyst, Nh√¢n vi√™n kinh doanh, qu·∫£n tr·ªã b√°o c√°o
Chi ph√≠	Cao h∆°n (d·ª±a tr√™n dung l∆∞·ª£ng d·ªØ li·ªáu log thu th·∫≠p/ng√†y)	R·∫ª h∆°n, c√≥ b·∫£n mi·ªÖn ph√≠ & b·∫£n Pro theo ng∆∞·ªùi d√πng

‚úÖ Khi n√†o ch·ªçn Splunk?
	‚Ä¢ B·∫°n l√†m vi·ªác v·ªõi log h·ªá th·ªëng, d·ªØ li·ªáu t·ª´ server, ·ª©ng d·ª•ng, m√°y ch·ªß b·∫£o m·∫≠t.
	‚Ä¢ C·∫ßn real-time monitoring, alerting, machine learning tr√™n log.
	‚Ä¢ L√† DevOps engineer, system admin, ho·∫∑c l√†m trong lƒ©nh v·ª±c b·∫£o m·∫≠t IT.
	‚Ä¢ B·∫°n c·∫ßn SIEM ƒë·ªÉ ph√°t hi·ªán t·∫•n c√¥ng, s·ª± c·ªë b·∫£o m·∫≠t.

‚úÖ Khi n√†o ch·ªçn Power BI?
	‚Ä¢ B·∫°n ph√¢n t√≠ch d·ªØ li·ªáu kinh doanh (doanh s·ªë, marketing, t√†i ch√≠nh...).
	‚Ä¢ D·ªØ li·ªáu b·∫°n ƒë·∫øn t·ª´ SQL, Excel, Salesforce, v.v.
	‚Ä¢ Ng∆∞·ªùi d√πng ch√≠nh l√† ban l√£nh ƒë·∫°o, nh√¢n vi√™n kinh doanh, k·∫ø to√°n.
	‚Ä¢ C·∫ßn tr·ª±c quan h√≥a bi·ªÉu ƒë·ªì, KPI ƒë·∫πp, c√≥ th·ªÉ chia s·∫ª qua Teams, SharePoint.

üéØ T√≥m t·∫Øt nhanh
N·∫øu b·∫°n l√†...	N√™n d√πng...
DevOps/System Admin	‚úÖ Splunk
Business Analyst / K·∫ø to√°n / Kinh doanh	‚úÖ Power BI



Ti√™u ch√≠	Freestyle Project	Pipeline Project
C√°ch t·∫°o c·∫•u h√¨nh	D√πng giao di·ªán web (UI), t·∫°o t·ª´ng b∆∞·ªõc b·∫±ng tay	Vi·∫øt script b·∫±ng Groovy/Jenkinsfile
T√≠nh linh ho·∫°t	H·∫°n ch·∫ø, kh√≥ m·ªü r·ªông ph·ª©c t·∫°p	R·∫•t linh ho·∫°t, h·ªó tr·ª£ logic ph·ª©c t·∫°p
Ki·ªÉm so√°t phi√™n b·∫£n (Git)	C·∫•u h√¨nh trong Jenkins, kh√¥ng version control	Jenkinsfile n·∫±m trong Git, d·ªÖ ki·ªÉm so√°t & rollback
H·ªó tr·ª£ nhi·ªÅu stage	H·∫°n ch·∫ø, kh√≥ nh√¨n t·ªïng th·ªÉ	H·ªó tr·ª£ nhi·ªÅu stage, d·ªÖ visualize flow
Kh·∫£ nƒÉng t√°i s·ª≠ d·ª•ng code	Kh√¥ng, m·ªói job l√† ri√™ng bi·ªát	C√≥ th·ªÉ d√πng shared libraries, modular h√≥a
T√≠ch h·ª£p DevOps hi·ªán ƒë·∫°i	H·∫°n ch·∫ø, kh√≥ CI/CD ph·ª©c t·∫°p	T√≠ch h·ª£p t·ªët v·ªõi GitOps, DevOps pipelines
Kh·∫£ nƒÉng ch·∫°y song song	G·∫ßn nh∆∞ kh√¥ng c√≥	C√≥ th·ªÉ ch·∫°y c√°c b∆∞·ªõc song song (parallel stages)
Kh·∫£ nƒÉng debug/logging	Kh√° ƒë∆°n gi·∫£n	Chi ti·∫øt, r√µ r√†ng theo t·ª´ng stage
Learning curve	D·ªÖ ti·∫øp c·∫≠n cho ng∆∞·ªùi m·ªõi	C·∫ßn h·ªçc Groovy/Jenkins DSL n√™n kh√≥ h∆°n m·ªôt ch√∫t


Ti√™u ch√≠	Declarative Pipeline	Scripted Pipeline
C√∫ ph√°p	D·ªÖ hi·ªÉu, c√≥ c·∫•u tr√∫c r√µ r√†ng	T·ª± do, linh ho·∫°t (Groovy)
ƒê·ªô ph·ªï bi·∫øn	Cao h∆°n hi·ªán t·∫°i	√çt h∆°n, nh∆∞ng v·∫´n d√πng cho custom use
Linh ho·∫°t	V·ª´a ph·∫£i	Cao
Kh·∫£ nƒÉng x·ª≠ l√Ω logic	H·∫°n ch·∫ø	M·∫°nh m·∫Ω (if, for, try-catch...)
ƒê·ªô ph√π h·ª£p v·ªõi CI/CD	T·ªët cho h·∫ßu h·∫øt use case	T·ªët cho c√°c use case ƒë·∫∑c bi·ªát



D√πng Shared Library ƒë·ªÉ t·∫°o pipeline trong Jenkins s·∫Ω gi√∫p ƒë∆°n gi·∫£n h√≥a v√† c·∫£i thi·ªán vi·ªác qu·∫£n l√Ω pipeline, ƒë·∫∑c bi·ªát khi b·∫°n c√≥ nhi·ªÅu d·ª± √°n ho·∫∑c pipeline ph·ª©c t·∫°p. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë l·ª£i √≠ch c·ªßa vi·ªác s·ª≠ d·ª•ng Shared Library:

‚úÖ L·ª£i √≠ch c·ªßa vi·ªác d√πng Shared Library:
	1. T√°i s·ª≠ d·ª•ng code:
		‚óã B·∫°n c√≥ th·ªÉ vi·∫øt logic pipeline m·ªôt l·∫ßn trong th∆∞ vi·ªán chung (shared library), r·ªìi s·ª≠ d·ª•ng l·∫°i ·ªü nhi·ªÅu d·ª± √°n.
		‚óã Gi·∫£m b·ªõt vi·ªác sao ch√©p m√£ gi·ªëng nhau gi·ªØa c√°c Jenkinsfile.
	2. D·ªÖ b·∫£o tr√¨:
		‚óã N·∫øu b·∫°n c·∫ßn thay ƒë·ªïi m·ªôt b∆∞·ªõc trong pipeline (v√≠ d·ª•: b∆∞·ªõc deploy), b·∫°n ch·ªâ c·∫ßn thay ƒë·ªïi n√≥ trong Shared Library thay v√¨ thay ƒë·ªïi trong t·ª´ng Jenkinsfile.
		‚óã Vi·ªác b·∫£o tr√¨ v√† c·∫≠p nh·∫≠t tr·ªü n√™n d·ªÖ d√†ng v√† nhanh ch√≥ng.
	3. Chia s·∫ª gi·ªØa c√°c ƒë·ªôi:
		‚óã C√°c nh√≥m kh√°c nhau c√≥ th·ªÉ c√πng s·ª≠ d·ª•ng m·ªôt shared library cho c√°c b∆∞·ªõc chung nh∆∞ build, test, deploy, v√† kh√¥ng ph·∫£i vi·∫øt l·∫°i ch√∫ng.
		‚óã ƒê·∫£m b·∫£o t√≠nh ƒë·ªìng nh·∫•t trong c√°c pipeline.
	4. Qu·∫£n l√Ω phi√™n b·∫£n d·ªÖ d√†ng:
		‚óã B·∫°n c√≥ th·ªÉ qu·∫£n l√Ω c√°c phi√™n b·∫£n kh√°c nhau c·ªßa th∆∞ vi·ªán v√† ch·ªâ c·∫ßn thay ƒë·ªïi phi√™n b·∫£n th∆∞ vi·ªán trong c√°c pipeline.
	5. D·ªÖ d√†ng m·ªü r·ªông:
		‚óã Khi b·∫°n c·∫ßn th√™m m·ªôt ch·ª©c nƒÉng m·ªõi (v√≠ d·ª•: ki·ªÉm tra b·∫£o m·∫≠t, b∆∞·ªõc ph√°t h√†nh), ch·ªâ c·∫ßn th√™m m·ªôt function v√†o shared library v√† m·ªçi pipeline s·ª≠ d·ª•ng th∆∞ vi·ªán ƒë√≥ s·∫Ω t·ª± ƒë·ªông c√≥ t√≠nh nƒÉng m·ªõi m√† kh√¥ng c·∫ßn s·ª≠a t·ª´ng Jenkinsfile.

üßë‚Äçüíª V√≠ d·ª• v·ªÅ so s√°nh:
Kh√¥ng d√πng Shared Library ‚Äì C√°c b∆∞·ªõc ƒë·ªÅu ph·∫£i vi·∫øt trong Jenkinsfile

groovy
CopyEdit
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                script {
                    echo "Building project..."
                    sh './build.sh'
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "Running tests..."
                    sh './test.sh'
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying..."
                    sh './deploy.sh'
                }
            }
        }
    }
}
D√πng Shared Library ‚Äì ƒê∆°n gi·∫£n h∆°n v·ªõi Jenkinsfile ch·ªâ ch·ª©a c√°c b∆∞·ªõc g·ªçi th∆∞ vi·ªán

groovy
CopyEdit
@Library('my-shared-library') _
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                buildProject()
            }
        }
        stage('Test') {
            steps {
                runTests()
            }
        }
        stage('Deploy') {
            steps {
                deployProject()
            }
        }
    }
}
Trong tr∆∞·ªùng h·ª£p n√†y, c√°c b∆∞·ªõc buildProject(), runTests(), v√† deployProject() ƒë·ªÅu ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong Shared Library v√† c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng l·∫°i cho c√°c pipeline kh√°c.

üèÅ T√≥m l·∫°i:
	‚Ä¢ D√πng Shared Library s·∫Ω gi√∫p b·∫°n t·ªï ch·ª©c, b·∫£o tr√¨ v√† t√°i s·ª≠ d·ª•ng code t·ªët h∆°n.
	‚Ä¢ N·∫øu b·∫°n c√≥ nhi·ªÅu pipeline ho·∫∑c d·ª± √°n gi·ªëng nhau, vi·ªác t·∫°o m·ªôt th∆∞ vi·ªán d√πng chung s·∫Ω gi·∫£m thi·ªÉu s·ª± tr√πng l·∫∑p v√† d·ªÖ b·∫£o tr√¨.
N·∫øu b·∫°n mu·ªën l√†m th·ª≠ ho·∫∑c c·∫ßn m√¨nh gi√∫p t·∫°o m·ªôt Shared Library m·∫´u cho Jenkins, m√¨nh c√≥ th·ªÉ h∆∞·ªõng d·∫´n chi ti·∫øt!


Document: 
‚Ä¢ Pipeline Syntax


üöÄ 1. Multibranch Pipeline
‚úÖ M·ª•c ƒë√≠ch:
T·ª± ƒë·ªông t·∫°o pipeline cho m·ªói nh√°nh (branch) trong m·ªôt repository Git.
üì¶ V√≠ d·ª• th·ª±c t·∫ø:
B·∫°n c√≥ repo Git t√™n my-app v·ªõi c√°c nh√°nh sau:

diff
CopyEdit
- main
- develop
- feature/login
Khi b·∫°n t·∫°o m·ªôt Multibranch Pipeline trong Jenkins, Jenkins s·∫Ω:
	‚Ä¢ Qu√©t to√†n b·ªô c√°c nh√°nh trong repo.
	‚Ä¢ N·∫øu trong nh√°nh ƒë√≥ c√≥ Jenkinsfile, Jenkins t·ª± ƒë·ªông t·∫°o job cho t·ª´ng nh√°nh.
	‚Ä¢ M·ªói nh√°nh s·∫Ω c√≥ pipeline ri√™ng bi·ªát (c√≥ th·ªÉ test ri√™ng bi·ªát theo nh√°nh).

üìò V√≠ d·ª• Jenkinsfile trong nh√°nh develop:

groovy
CopyEdit
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo "Building develop branch"
            }
        }
    }
}
Jenkins s·∫Ω build ri√™ng cho develop, v√† t∆∞∆°ng t·ª± cho main ho·∫∑c feature/... n·∫øu c√≥ Jenkinsfile.

üè¢ 2. Organization Folder
‚úÖ M·ª•c ƒë√≠ch:
T·ª± ƒë·ªông qu·∫£n l√Ω nhi·ªÅu repository thu·ªôc m·ªôt t·ªï ch·ª©c GitHub/GitLab/Bitbucket.
üì¶ V√≠ d·ª• th·ª±c t·∫ø:
B·∫°n c√≥ m·ªôt t·ªï ch·ª©c GitHub t√™n l√† mycompany ch·ª©a nhi·ªÅu repo:

diff
CopyEdit
- frontend-app
- backend-api
- mobile-app
Khi b·∫°n t·∫°o m·ªôt Organization Folder tr·ªè ƒë·∫øn https://github.com/mycompany, Jenkins s·∫Ω:
	‚Ä¢ Qu√©t t·∫•t c·∫£ repo thu·ªôc t·ªï ch·ª©c mycompany.
	‚Ä¢ M·ªói repo ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ m·ªôt Multibranch Pipeline.
	‚Ä¢ T·ª± ƒë·ªông ph√°t hi·ªán nh√°nh + Jenkinsfile trong m·ªói repo ‚Üí t·∫°o job t∆∞∆°ng ·ª©ng.

üõ† C√°ch d√πng:
V·ªõi Multibranch Pipeline:
	1. T·∫°o new item ‚Üí ch·ªçn Multibranch Pipeline.
	2. C·∫•u h√¨nh:
		‚óã Git repo URL
		‚óã Credentials n·∫øu c·∫ßn
		‚óã Branch Sources ‚Üí ch·ªçn Git, GitHub...
		‚óã Jenkins s·∫Ω t·ª± ƒë·ªông t·∫°o job theo t·ª´ng nh√°nh.
V·ªõi Organization Folder:
	1. T·∫°o new item ‚Üí ch·ªçn Organization Folder.
	2. C·∫•u h√¨nh:
		‚óã Ch·ªçn GitHub (ho·∫∑c GitLab, Bitbucket...)
		‚óã Nh·∫≠p GitHub org/user
		‚óã Th√™m credentials n·∫øu c·∫ßn
		‚óã Jenkins s·∫Ω qu√©t to√†n b·ªô c√°c repo trong t·ªï ch·ª©c.

üß† So s√°nh nhanh:

T√≠nh nƒÉng	Multibranch Pipeline	Organization Folder
Qu√©t theo nh√°nh	‚úÖ C√≥	‚úÖ C√≥
Qu√©t to√†n b·ªô repo	‚ùå Kh√¥ng	‚úÖ C√≥
Ph√π h·ª£p cho	M·ªôt repo nhi·ªÅu nh√°nh	Nhi·ªÅu repo trong 1 t·ªï ch·ª©c
M·ª©c ƒë·ªô t·ª± ƒë·ªông h√≥a	Trung b√¨nh	Cao










